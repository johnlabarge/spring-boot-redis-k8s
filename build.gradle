buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'groovy'


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
    baseName = 'spring-boot-app'
    version  = '0.1.0'
}
project.ext.gcp = "gcr.io/cloudjlb-eventer"


task buildBootImage(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    tag = "${project.ext.gcp}/${applicationName}"
    tagVersion=null
    dockerfile = file('kubernetes/images/spring-boot/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task deployBootImage(type: Exec, dependsOn: buildBootImage) {
    commandLine "gcloud","docker","--","push", "${buildBootImage.tag}"
}
task npmInstall(type: Exec) {
    workingDir "web-frontend/eventer"
    commandLine  "npm", "install", "."
}
task buildAngular(type: Exec, dependsOn: npmInstall) {
    workingDir "web-frontend/eventer"
    commandLine "ng", "build"
}
task buildFeImage(type: Docker, dependsOn: buildAngular) {
    push = false
    tag = "${project.ext.gcp}/web-frontend"
    dockerfile = file('kubernetes/images/frontend/Dockerfile')
    doFirst {
        copy {
            from file("web-frontend/eventer/dist")
            into file(stageDir.getPath()+'/dist')
        }
        copy {
            from file("web-frontend/eventer/nginx.conf")
            into stageDir
        }
    }
}
task deployFeImage(type: Exec, dependsOn: buildFeImage) {
    commandLine "gcloud", "docker", "--", "push",  "${buildFeImage.tag}"
}

task buildRedisImage(type: Docker) {
    push = false
    tag = "${project.ext.gcp}/redis-sentinel"
    dockerfile = file("kubernetes/images/redis/Dockerfile")
    doFirst {
        copy {
            from file("kubernetes/images/redis/docker-entrypoint.sh")
            into file(stageDir.getPath())
        }
        copy {
            from file("kubernetes/images/redis/redis.conf")
            into file(stageDir.getPath())
         }
    }
}


task deployRedisImage(type: Exec, dependsOn: buildRedisImage) {
    commandLine "gcloud", "docker", "--", "push", "${buildRedisImage.tag}"
}

def gcpFilter = { String line -> line.replaceAll("#GCP", project.ext.gcp) }
task buildKubs  << {
    copy {
        from 'kubernetes/redis'
        into 'kubernetes-build/redis'
        filter gcpFilter
    }
    copy {
        from 'kubernetes/app'
        into 'kubernetes-build/app'
        filter gcpFilter
    }
    copy {
        from 'kubernetes/frontend'
        into 'kubernetes-build/frontend'
        filter gcpFilter
    }
}

task deployToGKE(type: DefaultTask, dependsOn: buildKubs) {
    def kubectl = ["kubectl", "create", "-f"]
    def buildDir = "kubernetes-build"
    doLast {
        exec {
            workingDir buildDir
            commandLine kubectl + "redis/"
        }
        exec {
            workingDir buildDir
            commandLine kubectl + "app/"
        }
        exec {
            workingDir buildDir
            commandLine kubectl + "frontend/"
        }
        exec {
            commandLine kubectl + "kubernetes/load-balancer/"
        }
    }
}

task deleteFromGKE << {
    def kubedel = ["kubectl", "delete"]
    exec { commandLine kubedel + ["service", "redis-master"] }
    exec { commandLine kubedel + ["service", "redis-sentinel"] }
    exec { commandLine kubedel + ["service", "redis-slave"] }
    exec { commandLine kubedel + ["statefulset", "redis-slave"] }
    exec { commandLine kubedel + ["statefulset", "redis-sentinel"] }
    exec { commandLine kubedel + ["statefulset", "redis-master"] }
    exec { commandLine kubedel + ["deployment", "spring-boot"] }
    exec { commandLine kubedel + ["deployment", "frontend"] }
    exec { commandLine kubedel + ["service", "frontend"] }
    exec { commandLine kubedel + ["service", "api"] }
    exec { commandLine kubedel + ["ing", "boot"] }
    exec { commandLine kubedel + ["secret", "self-signed-cert"] }
}



repositories {
    mavenCentral()
}
targetCompatibility = 1.8
sourceCompatibility = 1.8
dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.data:spring-data-redis"

    compile "biz.paluch.redis:lettuce:3.5.0.Final"
    compile "se.transmode.gradle:gradle-docker:1.2"
    //compile "org.springframework.boot:spring-boot-starter-security"
    //compile "com.google.firebase:firebase-admin:4.0.3"
    compile group: 'com.google.cloud', name: 'google-cloud-datastore', version: '0.8.0-beta'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

